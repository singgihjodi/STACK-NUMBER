// STACK-NUMBER
//1717051013 - Singgih Jodi Prayoga
//1717051022 - Putri Febriana
//1717051051 - Patar Martua Doli Siahaan
//1757051008 - Ilham Maulidan


#include <iostream>
#define MAX 10
using namespace std;

struct Stack {
	char top;
	char data[MAX];
}
temp;

void init(){
	temp.top = -1;   //inisialisasi kepala dari stack,prinsip FILO
}

int checkkosong() {
  return temp.top == -1;
}

int checkpenuh() {
	return temp.top == MAX-1;
}

void push() {
   if (checkpenuh()) {
		cout << "\ntemp penuh"<<endl;
	}
	else {
    temp.top++;
  //  cout << "\nMasukkan data = "; 
	
   
	}
}

void pop() {
	if (checkkosong()) {
		cout << "\nData kosong\n"<<endl;
	}
	else {
    cout << "\nData "<<temp.data[temp.top]<<" sudah terambil"<<endl;
    temp.top--;
	}
}

void printStack() {
	if (checkkosong()) {
		cout << "temp kosong";
	}
	else {
    cout << "\ntemp : ";
		for (int i = temp.top; i >= 0; i--)
			cout << temp.data[i] << ((i == 0) ? "" : ",");
	}
}

int main() {
	int pilihan, data;
	init();
	do {
    printStack();
		cout << "\n1. Input (Push)\n"
        <<"2. Hapus (Pop)\n"
        <<"3. Keluar\n"
        <<"Masukkan Pilihan: ";
		cin >> pilihan;
		switch (pilihan)
		{
		case 1:
			push();
			cin >> temp.data[temp.top];
			break;
		case 2:
			pop();
			break;
		default:
      cout << "Pilihan tidak tersedia" << endl;
			break;
		}
	} while (pilihan!=3);
	
		cerr<<"apa ";
	}

/* #include <iostream>
using namespace std;
#define n 69 

class Stack
{
private:
  int data[n];
	int top;
public:
	Stack()
	{
		top = -1;
	}

	int Top() 
	{
		return data[top];
	}

	int IsEmpty()
	{
		if(top == -1) return 1;
		else return 0;
	}
	int Push(int x) 
	{
	  if(top == n-1) {
			cout<<"Stuck Penuh";
			return 0;
		}
		else {data[++top] = x;
		return x;}
	}
 

	int Pop() 
	{
		if(top == -1) {
			cout<<"Stuck Kosong";
			return 0;
		}
		else {top--;}	
	} 

	

	void Print() {
		int i;
		cout<<"Stack: ";
		for(i = 0;i<=top;i++){
			cout<<data[i];}
			cout<<endl;
	}
};

int tPrecedence(char pr){
	if (pr == '*' || pr == '/'){
		return 1;}
	else if(pr == '+' || pr =='-'){
		return 0;}
	else return -1;
	}

int tOperator(char op){
	string Operator = "+-*/";
	for(int i=0;Operator[i];i++){
		if(op == Operator[i]){
			return 1;}
		}
	return 0;
	}
	
int tOperand(char op){
	string Operand = "1234567890";
	for(int i=0;Operand[i];i++){
		if(op == Operand[i]){
			return 1;}
		}
	return 0;
	}

int main()
{	
	Stack S;
    string data;
    cin>>data;
    string P;
    
    for(int i=0;data[i];i++){
		if(tOperand(data[i]) == 1){
			P+=data[i];
			}
		
		else if(data[i] == '('){
			S.Push(data[i]);
			}
		
		else if(data[i] == ')'){
			while(S.IsEmpty() == 0 && S.Top() != '('){
				char tmp = S.Top();
				P+=tmp;
				S.Pop();
				}
			
		if(S.Top() == '('){
				S.Pop();}
		}
		
		if(tOperator(data[i]) == 1){
			if(S.IsEmpty() == 1 || S.Top() == '('){
			S.Push(data[i]);}
		
		else{
			while (S.IsEmpty() == 0 && S.Top() != '(' && tPrecedence(data[i]) <= tPrecedence(S.Top())){
				char tmp = S.Top();
				P+=tmp;
				S.Pop();
				}
			S.Push(data[i]);
			}
    
	}
		while(S.IsEmpty() == 0){
			char tmp = S.Top();
				P+=tmp;
				S.Pop();
			}


		
}for(int i=0;P[i];i++){
			cout<<P[i]<<" ";}}
*/
